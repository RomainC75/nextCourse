{"ast":null,"code":"import { MongoClient } from \"mongodb\";\n\nconst mongoConnect = async res => {\n  try {\n    const {\n      MongoClient\n    } = require(\"mongodb\");\n\n    const url = \"mongodb+srv://mongoAUse:i6m3jV7kqz8XP2S@cluster0.cl4dl.mongodb.net/nextjs\";\n    const client = new MongoClient(url);\n    await client.connect();\n    return client;\n  } catch (error) {\n    return res.status(400).json({\n      message: \"cannot connect to the database\"\n    });\n  }\n};\n\nconst mongoEmailRegistrationHandler = async (res, data) => {\n  try {\n    const client = await mongoConnect(res);\n    const db = client.db();\n    const ans = await db.collection(\"registration\").insertOne({\n      email: data.email\n    });\n    console.log(\"ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({\n      message: \"cannot insert the document\"\n    });\n  }\n};\n\nconst mongoCommentSavingHandler = async (res, data) => {\n  try {\n    const client = await mongoConnect(res);\n    const db = client.db();\n    const ans = await db.collection(\"comment\").insertOne(data);\n    console.log(\"ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({\n      message: \"cannot insert the document\"\n    });\n  }\n};\n\nconst mongoCommentReadingHandler = async (res, eventId) => {\n  try {\n    const client = await mongoConnect();\n    const db = client.db();\n    const ans = await db.collection(\"comment\").find({\n      eventId\n    }).toSort({\n      _id: -1\n    }).toArray();\n    console.log(\"==>ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({\n      message: \"cannot get the documents\"\n    });\n  }\n};\n\nexport { mongoEmailRegistrationHandler, mongoCommentSavingHandler, mongoCommentReadingHandler };","map":{"version":3,"sources":["/home/rom/Documents/dev/nextjs/tuto/section9-apiRoutes/helpers/mongodb.js"],"names":["MongoClient","mongoConnect","res","require","url","client","connect","error","status","json","message","mongoEmailRegistrationHandler","data","db","ans","collection","insertOne","email","console","log","close","mongoCommentSavingHandler","mongoCommentReadingHandler","eventId","find","toSort","_id","toArray"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;;AAEA,MAAMC,YAAY,GAAG,MAAOC,GAAP,IAAgB;AACnC,MAAI;AACF,UAAM;AAAEF,MAAAA;AAAF,QAAkBG,OAAO,CAAC,SAAD,CAA/B;;AACA,UAAMC,GAAG,GACP,2EADF;AAEA,UAAMC,MAAM,GAAG,IAAIL,WAAJ,CAAgBI,GAAhB,CAAf;AACA,UAAMC,MAAM,CAACC,OAAP,EAAN;AACA,WAAOD,MAAP;AACD,GAPD,CAOE,OAAOE,KAAP,EAAc;AACd,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACD;AACF,CAXD;;AAaA,MAAMC,6BAA6B,GAAG,OAAOT,GAAP,EAAYU,IAAZ,KAAqB;AACzD,MAAI;AACF,UAAMP,MAAM,GAAG,MAAMJ,YAAY,CAACC,GAAD,CAAjC;AACA,UAAMW,EAAE,GAAGR,MAAM,CAACQ,EAAP,EAAX;AACA,UAAMC,GAAG,GAAG,MAAMD,EAAE,CACjBE,UADe,CACJ,cADI,EAEfC,SAFe,CAEL;AAAEC,MAAAA,KAAK,EAAEL,IAAI,CAACK;AAAd,KAFK,CAAlB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,GAAtB;AACA,UAAMT,MAAM,CAACe,KAAP,EAAN;AACA,WAAON,GAAP;AACD,GATD,CASE,OAAOP,KAAP,EAAc;AACd,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACD;AACF,CAbD;;AAeA,MAAMW,yBAAyB,GAAG,OAAOnB,GAAP,EAAYU,IAAZ,KAAqB;AACrD,MAAI;AACF,UAAMP,MAAM,GAAG,MAAMJ,YAAY,CAACC,GAAD,CAAjC;AACA,UAAMW,EAAE,GAAGR,MAAM,CAACQ,EAAP,EAAX;AACA,UAAMC,GAAG,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,SAAd,EAAyBC,SAAzB,CAAmCJ,IAAnC,CAAlB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,GAAtB;AACA,UAAMT,MAAM,CAACe,KAAP,EAAN;AACA,WAAON,GAAP;AACD,GAPD,CAOE,OAAOP,KAAP,EAAc;AACd,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACD;AACF,CAXD;;AAaA,MAAMY,0BAA0B,GAAG,OAAOpB,GAAP,EAAYqB,OAAZ,KAAwB;AACzD,MAAI;AACF,UAAMlB,MAAM,GAAG,MAAMJ,YAAY,EAAjC;AACA,UAAMY,EAAE,GAAGR,MAAM,CAACQ,EAAP,EAAX;AACA,UAAMC,GAAG,GAAG,MAAMD,EAAE,CACjBE,UADe,CACJ,SADI,EAEfS,IAFe,CAEV;AAAED,MAAAA;AAAF,KAFU,EAGfE,MAHe,CAGR;AAAEC,MAAAA,GAAG,EAAE,CAAC;AAAR,KAHQ,EAIfC,OAJe,EAAlB;AAMAT,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,GAAzB;AACA,UAAMT,MAAM,CAACe,KAAP,EAAN;AACA,WAAON,GAAP;AACD,GAZD,CAYE,OAAOP,KAAP,EAAc;AACd,WAAOL,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACD;AACF,CAhBD;;AAkBA,SACEC,6BADF,EAEEU,yBAFF,EAGEC,0BAHF","sourcesContent":["import { MongoClient } from \"mongodb\";\n\nconst mongoConnect = async (res ) => {\n  try {\n    const { MongoClient } = require(\"mongodb\");\n    const url =\n      \"mongodb+srv://mongoAUse:i6m3jV7kqz8XP2S@cluster0.cl4dl.mongodb.net/nextjs\";\n    const client = new MongoClient(url);\n    await client.connect();\n    return client;\n  } catch (error) {\n    return res.status(400).json({message: \"cannot connect to the database\"})\n  }\n};\n\nconst mongoEmailRegistrationHandler = async (res, data) => {\n  try {\n    const client = await mongoConnect(res);\n    const db = client.db();\n    const ans = await db\n      .collection(\"registration\")\n      .insertOne({ email: data.email });\n    console.log(\"ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({message: \"cannot insert the document\"})\n  }\n};\n\nconst mongoCommentSavingHandler = async (res, data) => {\n  try {\n    const client = await mongoConnect(res);\n    const db = client.db();\n    const ans = await db.collection(\"comment\").insertOne(data);\n    console.log(\"ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({message: \"cannot insert the document\"})\n  }\n};\n\nconst mongoCommentReadingHandler = async (res, eventId) => {\n  try {\n    const client = await mongoConnect();\n    const db = client.db();\n    const ans = await db\n      .collection(\"comment\")\n      .find({ eventId })\n      .toSort({ _id: -1 })\n      .toArray();\n\n    console.log(\"==>ans : \", ans);\n    await client.close();\n    return ans;\n  } catch (error) {\n    return res.status(400).json({message: \"cannot get the documents\"})\n  }\n};\n\nexport {\n  mongoEmailRegistrationHandler,\n  mongoCommentSavingHandler,\n  mongoCommentReadingHandler,\n};\n"]},"metadata":{},"sourceType":"module"}