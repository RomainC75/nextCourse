{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCommentsOnEvent, saveComment } from \"../../../dummy-data\";\nimport { mongoCommentSavingHandler } from \"../../../helpers/mongodb\";\n\nfunction handler(req, res) {\n  const {\n    eventId\n  } = req.query;\n  console.log('==> eventId : ', eventId, req.url, req.body);\n\n  if (req.method === \"POST\") {\n    const newComment = JSON.parse(req.body);\n    const id = new Date().toISOString(); // const comment = saveComment({...newComment,id},eventId)\n\n    const comment = mongoCommentSavingHandler(_objectSpread(_objectSpread({}, newComment), {}, {\n      id,\n      eventId\n    }));\n    return res.status(201).json({\n      message: \"comment saved\",\n      comment: _objectSpread(_objectSpread({}, comment), {}, {\n        id\n      })\n    });\n  }\n\n  const foundComments = getCommentsOnEvent(eventId);\n  res.status(200).json(foundComments);\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/rom/Documents/dev/nextjs/tuto/section9-apiRoutes/pages/api/comment/[eventId].js"],"names":["getCommentsOnEvent","saveComment","mongoCommentSavingHandler","handler","req","res","eventId","query","console","log","url","body","method","newComment","JSON","parse","id","Date","toISOString","comment","status","json","message","foundComments"],"mappings":";;;;;;AAAA,SAASA,kBAAT,EAA6BC,WAA7B,QAAgD,qBAAhD;AACA,SAASC,yBAAT,QAA0C,0BAA1C;;AAEA,SAASC,OAAT,CAAkBC,GAAlB,EAAsBC,GAAtB,EAA0B;AACtB,QAAM;AAACC,IAAAA;AAAD,MAAYF,GAAG,CAACG,KAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAA9B,EAAuCF,GAAG,CAACM,GAA3C,EAAgDN,GAAG,CAACO,IAApD;;AAEA,MAAGP,GAAG,CAACQ,MAAJ,KAAa,MAAhB,EAAuB;AACnB,UAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWX,GAAG,CAACO,IAAf,CAAnB;AACA,UAAMK,EAAE,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAX,CAFmB,CAGnB;;AACA,UAAMC,OAAO,GAAGjB,yBAAyB,iCAAKW,UAAL;AAAgBG,MAAAA,EAAhB;AAAoBV,MAAAA;AAApB,OAAzC;AAEA,WAAOD,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,MAAAA,OAAO,EAAE,eADe;AAExBH,MAAAA,OAAO,kCAAKA,OAAL;AAAaH,QAAAA;AAAb;AAFiB,KAArB,CAAP;AAIH;;AAED,QAAMO,aAAa,GAAGvB,kBAAkB,CAACM,OAAD,CAAxC;AACAD,EAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBE,aAArB;AACH;;AAED,eAAepB,OAAf","sourcesContent":["import { getCommentsOnEvent, saveComment } from \"../../../dummy-data\"\nimport { mongoCommentSavingHandler } from \"../../../helpers/mongodb\"\n\nfunction handler (req,res){\n    const {eventId} = req.query\n    console.log('==> eventId : ', eventId, req.url, req.body)\n    \n    if(req.method===\"POST\"){\n        const newComment = JSON.parse(req.body)\n        const id = new Date().toISOString()\n        // const comment = saveComment({...newComment,id},eventId)\n        const comment = mongoCommentSavingHandler({...newComment,id, eventId})\n\n        return res.status(201).json({\n            message: \"comment saved\",\n            comment:{...comment,id}\n        })    \n    }\n    \n    const foundComments = getCommentsOnEvent(eventId)\n    res.status(200).json(foundComments)\n}\n\nexport default handler"]},"metadata":{},"sourceType":"module"}