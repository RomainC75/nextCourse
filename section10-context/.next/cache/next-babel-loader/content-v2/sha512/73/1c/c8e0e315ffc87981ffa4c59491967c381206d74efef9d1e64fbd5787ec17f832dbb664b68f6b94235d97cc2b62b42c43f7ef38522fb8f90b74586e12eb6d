{"ast":null,"code":"import _regeneratorRuntime from \"/home/rom/Documents/dev/nextjs/tuto/section10-context/node_modules/@babel/runtime/regenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/home/rom/Documents/dev/nextjs/tuto/section10-context/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/rom/Documents/dev/nextjs/tuto/section10-context/components/input/comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext } from \"react\";\nimport CommentList from \"./comment-list\";\nimport NewComment from \"./new-comment\";\nimport classes from \"./comments.module.css\";\nimport NotificationContext from \"../../store/notification-context\";\n\nfunction Comments(props) {\n  _s();\n\n  var _useContext = useContext(NotificationContext),\n      hideNotification = _useContext.hideNotification,\n      showNotification = _useContext.showNotification;\n\n  var eventId = props.eventId;\n\n  var _useState = useState(false),\n      showComments = _useState[0],\n      setShowComments = _useState[1];\n\n  var _useState2 = useState([]),\n      commentsState = _useState2[0],\n      setCommentsState = _useState2[1];\n\n  function toggleCommentsHandler() {\n    setShowComments(function (prevStatus) {\n      return !prevStatus;\n    });\n  }\n\n  function addCommentHandler(_x) {\n    return _addCommentHandler.apply(this, arguments);\n  }\n\n  function _addCommentHandler() {\n    _addCommentHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(commentData) {\n      var rawComments, comments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/api/comment/\".concat(eventId), {\n                method: \"POST\",\n                body: JSON.stringify(commentData)\n              });\n\n            case 3:\n              _context.next = 5;\n              return fetch(\"/api/comment/\".concat(eventId));\n\n            case 5:\n              rawComments = _context.sent;\n              _context.next = 8;\n              return rawComments.json();\n\n            case 8:\n              comments = _context.sent;\n              console.log(\"==> COMMENTS \", comments); // if()\n\n              if (Array.isArray(comments)) {\n                setCommentsState(comments);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.log('error : ', _context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n    return _addCommentHandler.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCommentsHandler,\n      children: [showComments ? \"Hide\" : \"Show\", \" Comments\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), showComments && /*#__PURE__*/_jsxDEV(NewComment, {\n      onAddComment: addCommentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 24\n    }, this), showComments && /*#__PURE__*/_jsxDEV(CommentList, {\n      comments: commentsState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Comments, \"A76l6wkof/UrlN4f/+T1RtE0N3A=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/home/rom/Documents/dev/nextjs/tuto/section10-context/components/input/comments.js"],"names":["useState","useContext","CommentList","NewComment","classes","NotificationContext","Comments","props","hideNotification","showNotification","eventId","showComments","setShowComments","commentsState","setCommentsState","toggleCommentsHandler","prevStatus","addCommentHandler","commentData","fetch","method","body","JSON","stringify","rawComments","json","comments","console","log","Array","isArray"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAOC,mBAAP,MAAgC,kCAAhC;;AAGA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAAA,oBACsBN,UAAU,CAACI,mBAAD,CADhC;AAAA,MAChBG,gBADgB,eAChBA,gBADgB;AAAA,MACEC,gBADF,eACEA,gBADF;;AAAA,MAGfC,OAHe,GAGHH,KAHG,CAGfG,OAHe;;AAAA,kBAKiBV,QAAQ,CAAC,KAAD,CALzB;AAAA,MAKhBW,YALgB;AAAA,MAKFC,eALE;;AAAA,mBAMmBZ,QAAQ,CAAC,EAAD,CAN3B;AAAA,MAMhBa,aANgB;AAAA,MAMDC,gBANC;;AAQvB,WAASC,qBAAT,GAAiC;AAC/BH,IAAAA,eAAe,CAAC,UAACI,UAAD;AAAA,aAAgB,CAACA,UAAjB;AAAA,KAAD,CAAf;AACD;;AAVsB,WAYRC,iBAZQ;AAAA;AAAA;;AAAA;AAAA,kFAYvB,iBAAiCC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGUC,KAAK,wBAAiBT,OAAjB,GAA4B;AACrCU,gBAAAA,MAAM,EAAE,MAD6B;AAErCC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,WAAf;AAF+B,eAA5B,CAHf;;AAAA;AAAA;AAAA,qBAQgCC,KAAK,wBAAiBT,OAAjB,EARrC;;AAAA;AAQYc,cAAAA,WARZ;AAAA;AAAA,qBAS6BA,WAAW,CAACC,IAAZ,EAT7B;;AAAA;AASYC,cAAAA,QATZ;AAUMC,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAA7B,EAVN,CAWM;;AACA,kBAAGG,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAH,EAA2B;AACzBZ,gBAAAA,gBAAgB,CAACY,QAAD,CAAhB;AACD;;AAdP;AAAA;;AAAA;AAAA;AAAA;AAgBIC,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZuB;AAAA;AAAA;;AAiCvB,sBACE;AAAS,IAAA,SAAS,EAAExB,OAAO,CAACsB,QAA5B;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEX,qBAAjB;AAAA,iBACGJ,YAAY,GAAG,MAAH,GAAY,MAD3B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAIGA,YAAY,iBAAI,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEM;AAA1B;AAAA;AAAA;AAAA;AAAA,YAJnB,EAKGN,YAAY,iBAAI,QAAC,WAAD;AAAa,MAAA,QAAQ,EAAEE;AAAvB;AAAA;AAAA;AAAA;AAAA,YALnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA1CQP,Q;;KAAAA,Q;AA4CT,eAAeA,QAAf","sourcesContent":["import { useState, useContext } from \"react\";\nimport CommentList from \"./comment-list\";\nimport NewComment from \"./new-comment\";\nimport classes from \"./comments.module.css\";\n\nimport NotificationContext from \"../../store/notification-context\";\n\n\nfunction Comments(props) {\n  const {hideNotification, showNotification} = useContext(NotificationContext)\n  \n  const { eventId } = props;\n\n  const [showComments, setShowComments] = useState(false);\n  const [commentsState, setCommentsState] = useState([]);\n\n  function toggleCommentsHandler() {\n    setShowComments((prevStatus) => !prevStatus);\n  }\n\n  async function addCommentHandler(commentData) {\n    try {\n\n      await fetch(`/api/comment/${eventId}`, {\n        method: \"POST\",\n        body: JSON.stringify(commentData),\n      });\n      \n        const rawComments = await fetch(`/api/comment/${eventId}`);\n        const comments = await rawComments.json();\n        console.log(\"==> COMMENTS \", comments);\n        // if()\n        if(Array.isArray(comments)){\n          setCommentsState(comments);\n        }\n    } catch (error) {\n      console.log('error : ', error)\n    }\n    \n  }\n\n  return (\n    <section className={classes.comments}>\n      <button onClick={toggleCommentsHandler}>\n        {showComments ? \"Hide\" : \"Show\"} Comments\n      </button>\n      {showComments && <NewComment onAddComment={addCommentHandler} />}\n      {showComments && <CommentList comments={commentsState} />}\n    </section>\n  );\n}\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}