{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getCommentsOnEvent, saveComment } from \"../../../dummy-data\";\nimport { getAllComments, mongoCommentSavingHandler, mongoConnect } from \"../../../helpers/mongodb\";\n\nasync function handler(req, res) {\n  const {\n    eventId\n  } = req.query;\n  console.log(\"==> eventId : \", eventId, req.url, req.body);\n  let client;\n\n  try {\n    client = await mongoConnect();\n  } catch (error) {\n    return res.status(500).json({\n      message: \"connecting to the db failed\"\n    });\n  }\n\n  if (req.method === \"POST\") {\n    try {\n      const newComment = JSON.parse(req.body);\n      const id = new Date().toISOString();\n      const comment = mongoCommentSavingHandler(client, \"comment\", _objectSpread(_objectSpread({}, newComment), {}, {\n        id,\n        eventId\n      }));\n      return res.status(201).json({\n        message: \"comment saved\",\n        comment: _objectSpread(_objectSpread({}, comment), {}, {\n          id\n        })\n      });\n    } catch (error) {\n      return res.status(400).json({\n        message: \"saving comment failed\"\n      });\n    }\n  }\n\n  const foundComments = await getAllComments(client, \"comment\", eventId);\n  res.status(200).json(foundComments);\n}\n\nexport default handler;","map":{"version":3,"sources":["/home/rom/Documents/dev/nextjs/tuto/section10-context/pages/api/comment/[eventId].js"],"names":["getCommentsOnEvent","saveComment","getAllComments","mongoCommentSavingHandler","mongoConnect","handler","req","res","eventId","query","console","log","url","body","client","error","status","json","message","method","newComment","JSON","parse","id","Date","toISOString","comment","foundComments"],"mappings":";;;;;;AAAA,SAASA,kBAAT,EAA6BC,WAA7B,QAAgD,qBAAhD;AACA,SACEC,cADF,EAEEC,yBAFF,EAGEC,YAHF,QAIO,0BAJP;;AAMA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAcF,GAAG,CAACG,KAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAA9B,EAAuCF,GAAG,CAACM,GAA3C,EAAgDN,GAAG,CAACO,IAApD;AACA,MAAIC,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAG,MAAMV,YAAY,EAA3B;AACD,GAFD,CAEE,OAAOW,KAAP,EAAc;AACd,WAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB,CAAP;AACD;;AAED,MAAIZ,GAAG,CAACa,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF,YAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWhB,GAAG,CAACO,IAAf,CAAnB;AACA,YAAMU,EAAE,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAX;AACA,YAAMC,OAAO,GAAGvB,yBAAyB,CAACW,MAAD,EAAS,SAAT,kCACpCM,UADoC;AAEvCG,QAAAA,EAFuC;AAGvCf,QAAAA;AAHuC,SAAzC;AAMA,aAAOD,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE,eADiB;AAE1BQ,QAAAA,OAAO,kCAAOA,OAAP;AAAgBH,UAAAA;AAAhB;AAFmB,OAArB,CAAP;AAID,KAbD,CAaE,OAAOR,KAAP,EAAc;AACZ,aAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAG;AAAX,OAArB,CAAP;AACH;AACF;;AAED,QAAMS,aAAa,GAAG,MAAMzB,cAAc,CAACY,MAAD,EAAS,SAAT,EAAoBN,OAApB,CAA1C;AACAD,EAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBU,aAArB;AACD;;AAED,eAAetB,OAAf","sourcesContent":["import { getCommentsOnEvent, saveComment } from \"../../../dummy-data\";\nimport {\n  getAllComments,\n  mongoCommentSavingHandler,\n  mongoConnect,\n} from \"../../../helpers/mongodb\";\n\nasync function handler(req, res) {\n  const { eventId } = req.query;\n  console.log(\"==> eventId : \", eventId, req.url, req.body);\n  let client;\n  try {\n    client = await mongoConnect();\n  } catch (error) {\n    return res.status(500).json({ message: \"connecting to the db failed\" });\n  }\n\n  if (req.method === \"POST\") {\n    try {\n      const newComment = JSON.parse(req.body);\n      const id = new Date().toISOString();\n      const comment = mongoCommentSavingHandler(client, \"comment\", {\n        ...newComment,\n        id,\n        eventId,\n      });\n\n      return res.status(201).json({\n        message: \"comment saved\",\n        comment: { ...comment, id },\n      });\n    } catch (error) {\n        return res.status(400).json({message : \"saving comment failed\"})\n    }\n  }\n\n  const foundComments = await getAllComments(client, \"comment\", eventId);\n  res.status(200).json(foundComments);\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}